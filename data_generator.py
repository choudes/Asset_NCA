{"cells":[{"cell_type":"code","source":["import os\n","import pandas as pd\n","import numpy as np\n","from faker import Faker\n","import random\n","import datetime\n","\n","# Initialize Faker for generating fake data\n","fake = Faker()\n","\n","# --- Configuration ---\n","NUM_ROWS_NETFLOW = 5000\n","NUM_ROWS_ZEEK = 4000\n","NUM_CLIENTS = 150\n","NUM_SERVERS = 5\n","\n","# Define core network assets (servers)\n","# These will be intentionally made more \"central\" in the traffic generation\n","SERVER_IPS = [f'10.0.0.{i}' for i in range(101, 101 + NUM_SERVERS)]\n","COMMON_SERVER_PORTS = [80, 443, 53, 22, 3389]\n","\n","# Define client IP range\n","CLIENT_IPS = [f'192.168.1.{i}' for i in range(1, 1 + NUM_CLIENTS)]\n","\n","ALL_IPS = SERVER_IPS + CLIENT_IPS\n","\n","def generate_netflow_data():\n","    \"\"\"\n","    Generates a synthetic Netflow dataset as a pandas DataFrame.\n","    The data is intentionally biased to make servers more central.\n","    \"\"\"\n","    print(f\"Generating {NUM_ROWS_NETFLOW} synthetic Netflow records...\")\n","    data = []\n","    for _ in range(NUM_ROWS_NETFLOW):\n","        # 70% of traffic involves a server to create centrality\n","        if random.random() < 0.7:\n","            src_ip = random.choice(CLIENT_IPS)\n","            dst_ip = random.choice(SERVER_IPS)\n","            # Flip direction sometimes\n","            if random.random() > 0.5:\n","                src_ip, dst_ip = dst_ip, src_ip\n","        else:\n","            # The other 30% is client-to-client traffic\n","            src_ip, dst_ip = random.sample(CLIENT_IPS, 2)\n","\n","        # Assign ports realistically\n","        if dst_ip in SERVER_IPS:\n","            src_port = random.randint(1024, 65535)\n","            dst_port = random.choice(COMMON_SERVER_PORTS)\n","        else:\n","            src_port = random.randint(1024, 65535)\n","            dst_port = random.choice([80, 443, 8080] + list(range(1024, 65535)))\n","\n","\n","        record = {\n","            'timestamp': fake.iso8601(),\n","            'src_ip': src_ip,\n","            'dst_ip': dst_ip,\n","            'src_port': src_port,\n","            'dst_port': dst_port,\n","            'protocol': random.choice(['TCP', 'UDP']),\n","            'bytes': random.randint(60, 15000),\n","            'packets': random.randint(1, 100)\n","        }\n","        data.append(record)\n","\n","    df = pd.DataFrame(data)\n","    print(\"Netflow data generation complete.\")\n","    return df\n","\n","def generate_zeek_conn_log():\n","    \"\"\"\n","    Generates a synthetic Zeek conn.log style dataset as a pandas DataFrame.\n","    \"\"\"\n","    print(f\"Generating {NUM_ROWS_ZEEK} synthetic Zeek conn.log records...\")\n","    data = []\n","    for _ in range(NUM_ROWS_ZEEK):\n","        # Use the same logic as netflow for generating traffic patterns\n","        if random.random() < 0.75:\n","            orig_h = random.choice(CLIENT_IPS)\n","            resp_h = random.choice(SERVER_IPS)\n","        else:\n","            orig_h, resp_h = random.sample(CLIENT_IPS, 2)\n","\n","        if resp_h in SERVER_IPS:\n","            resp_p = random.choice(COMMON_SERVER_PORTS)\n","        else:\n","            resp_p = random.randint(1024, 65535)\n","\n","        record = {\n","            'ts': datetime.datetime.now().timestamp() + random.uniform(-1000, 1000),\n","            'uid': fake.uuid4(),\n","            'id.orig_h': orig_h,\n","            'id.orig_p': random.randint(1024, 65535),\n","            'id.resp_h': resp_h,\n","            'id.resp_p': resp_p,\n","            'proto': random.choice(['tcp', 'udp']),\n","            'service': random.choice(['http', 'ssl', 'dns', '-', 'ssh']),\n","            'duration': round(random.uniform(0.1, 60), 6),\n","            'orig_bytes': random.randint(100, 5000),\n","            'resp_bytes': random.randint(100, 25000),\n","            'conn_state': random.choice(['SF', 'S0', 'REJ', 'S1'])\n","        }\n","        data.append(record)\n","\n","    df = pd.DataFrame(data)\n","    print(\"Zeek conn.log data generation complete.\")\n","    return df\n","\n","def generate_and_save_data():\n","    \"\"\"Generates all datasets and saves them to CSV files.\"\"\"\n","    netflow_df = generate_netflow_data()\n","    netflow_df.to_csv('netflow_log.csv', index=False)\n","    absolute_path = os.path.abspath('netflow_log.csv')\n","    print(\"Saved Netflow data to 'netflow_log.csv'\")\n","    print(absolute_path)\n","\n","    zeek_df = generate_zeek_conn_log()\n","    zeek_df.to_csv('zeek_conn_log.csv', index=False)\n","    print(\"Saved Zeek data to 'zeek_conn_log.csv'\")\n","\n","generate_and_save_data()"],"outputs":[{"output_type":"stream","name":"stdout","text":["Generating 5000 synthetic Netflow records...\n","Netflow data generation complete.\n","Saved Netflow data to 'netflow_log.csv'\n","/content/netflow_log.csv\n","Generating 4000 synthetic Zeek conn.log records...\n","Zeek conn.log data generation complete.\n","Saved Zeek data to 'zeek_conn_log.csv'\n"]}],"execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qVYu1AvcN-5P","executionInfo":{"status":"ok","timestamp":1749804833463,"user_tz":-480,"elapsed":5530,"user":{"displayName":"Vasonila Rajesh","userId":"05196519396315335899"}},"outputId":"20df22dc-05a8-487c-a750-3260bbbf45bf"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bd6de4e6","executionInfo":{"status":"ok","timestamp":1749800318222,"user_tz":-480,"elapsed":10887,"user":{"displayName":"Vasonila Rajesh","userId":"05196519396315335899"}},"outputId":"60f663da-e580-4f4f-a236-4a579af84769"},"source":["%pip install faker"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting faker\n","  Downloading faker-37.4.0-py3-none-any.whl.metadata (15 kB)\n","Requirement already satisfied: tzdata in /usr/local/lib/python3.11/dist-packages (from faker) (2025.2)\n","Downloading faker-37.4.0-py3-none-any.whl (1.9 MB)\n","\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/1.9 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.6/1.9 MB\u001b[0m \u001b[31m19.7 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m29.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: faker\n","Successfully installed faker-37.4.0\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":729},"id":"2b0b4c56","executionInfo":{"status":"ok","timestamp":1749804839913,"user_tz":-480,"elapsed":263,"user":{"displayName":"Vasonila Rajesh","userId":"05196519396315335899"}},"outputId":"3d540079-ad83-4df1-a958-b124ce7cbc54"},"source":["# Load the generated Netflow data\n","netflow_df = pd.read_csv('netflow_log.csv')\n","print(\"Netflow Data Head:\")\n","display(netflow_df.head())\n","\n","# Load the generated Zeek conn.log data\n","zeek_df = pd.read_csv('zeek_conn_log.csv')\n","print(\"\\nZeek Conn.log Data Head:\")\n","display(zeek_df.head())"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Netflow Data Head:\n"]},{"output_type":"display_data","data":{"text/plain":["                    timestamp         src_ip        dst_ip  src_port  \\\n","0  1996-03-02T11:15:20.750712   192.168.1.39    10.0.0.101     13955   \n","1  2007-04-21T10:47:05.307436   192.168.1.64  192.168.1.29     22677   \n","2  2000-12-27T22:14:12.353718     10.0.0.102  192.168.1.14     11338   \n","3  1972-06-02T06:19:02.313661  192.168.1.126    10.0.0.104     65526   \n","4  2019-11-12T15:41:27.104113     10.0.0.105  192.168.1.51      5359   \n","\n","   dst_port protocol  bytes  packets  \n","0        80      TCP  12934       24  \n","1     50987      UDP   4250        6  \n","2     47664      TCP  10619       78  \n","3        53      TCP   6917        7  \n","4     61354      TCP   3524       92  "],"text/html":["\n","  <div id=\"df-4ad7688b-a557-49ab-bd08-2eecf0039f57\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>timestamp</th>\n","      <th>src_ip</th>\n","      <th>dst_ip</th>\n","      <th>src_port</th>\n","      <th>dst_port</th>\n","      <th>protocol</th>\n","      <th>bytes</th>\n","      <th>packets</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1996-03-02T11:15:20.750712</td>\n","      <td>192.168.1.39</td>\n","      <td>10.0.0.101</td>\n","      <td>13955</td>\n","      <td>80</td>\n","      <td>TCP</td>\n","      <td>12934</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2007-04-21T10:47:05.307436</td>\n","      <td>192.168.1.64</td>\n","      <td>192.168.1.29</td>\n","      <td>22677</td>\n","      <td>50987</td>\n","      <td>UDP</td>\n","      <td>4250</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2000-12-27T22:14:12.353718</td>\n","      <td>10.0.0.102</td>\n","      <td>192.168.1.14</td>\n","      <td>11338</td>\n","      <td>47664</td>\n","      <td>TCP</td>\n","      <td>10619</td>\n","      <td>78</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1972-06-02T06:19:02.313661</td>\n","      <td>192.168.1.126</td>\n","      <td>10.0.0.104</td>\n","      <td>65526</td>\n","      <td>53</td>\n","      <td>TCP</td>\n","      <td>6917</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2019-11-12T15:41:27.104113</td>\n","      <td>10.0.0.105</td>\n","      <td>192.168.1.51</td>\n","      <td>5359</td>\n","      <td>61354</td>\n","      <td>TCP</td>\n","      <td>3524</td>\n","      <td>92</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ad7688b-a557-49ab-bd08-2eecf0039f57')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4ad7688b-a557-49ab-bd08-2eecf0039f57 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4ad7688b-a557-49ab-bd08-2eecf0039f57');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-d582735b-6119-4872-bed4-24edf355178f\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d582735b-6119-4872-bed4-24edf355178f')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-d582735b-6119-4872-bed4-24edf355178f button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(zeek_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"timestamp\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2007-04-21T10:47:05.307436\",\n          \"2019-11-12T15:41:27.104113\",\n          \"2000-12-27T22:14:12.353718\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"src_ip\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"192.168.1.64\",\n          \"10.0.0.105\",\n          \"10.0.0.102\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dst_ip\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"192.168.1.29\",\n          \"192.168.1.51\",\n          \"192.168.1.14\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"src_port\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24158,\n        \"min\": 5359,\n        \"max\": 65526,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          22677,\n          5359,\n          11338\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dst_port\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29610,\n        \"min\": 53,\n        \"max\": 61354,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          50987,\n          61354,\n          47664\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"protocol\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"UDP\",\n          \"TCP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bytes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4057,\n        \"min\": 3524,\n        \"max\": 12934,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4250,\n          3524\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"packets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 6,\n        \"max\": 92,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6,\n          92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Zeek Conn.log Data Head:\n"]},{"output_type":"display_data","data":{"text/plain":["             ts                                   uid      id.orig_h  \\\n","0  1.749805e+09  e1aff87a-7b89-4369-bc76-4ebb33fbcf80  192.168.1.126   \n","1  1.749804e+09  ab4433f9-bac6-410d-a0e1-2498192f6ea8   192.168.1.18   \n","2  1.749806e+09  467d36f4-4d3b-468c-8aec-0e965400f01d  192.168.1.132   \n","3  1.749805e+09  8c37032e-a5e6-4d4b-b304-d82008664529  192.168.1.127   \n","4  1.749804e+09  cbdd4595-f46b-4283-96ea-ce201475e8b3   192.168.1.48   \n","\n","   id.orig_p     id.resp_h  id.resp_p proto service   duration  orig_bytes  \\\n","0      14824    10.0.0.103       3389   tcp     dns  14.612585        1664   \n","1       5807    10.0.0.104         80   tcp     dns  49.016475        4726   \n","2      13612    10.0.0.103        443   tcp     ssh  30.169509        1902   \n","3      65256    10.0.0.103       3389   tcp       -  18.465165        4728   \n","4       7879  192.168.1.36      50747   udp     ssl   4.641450        1986   \n","\n","   resp_bytes conn_state  \n","0       15331         S0  \n","1       17196         SF  \n","2       16396         S0  \n","3       13343        REJ  \n","4       22544         SF  "],"text/html":["\n","  <div id=\"df-130a67f5-1a9a-495d-929e-f22848e53911\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ts</th>\n","      <th>uid</th>\n","      <th>id.orig_h</th>\n","      <th>id.orig_p</th>\n","      <th>id.resp_h</th>\n","      <th>id.resp_p</th>\n","      <th>proto</th>\n","      <th>service</th>\n","      <th>duration</th>\n","      <th>orig_bytes</th>\n","      <th>resp_bytes</th>\n","      <th>conn_state</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.749805e+09</td>\n","      <td>e1aff87a-7b89-4369-bc76-4ebb33fbcf80</td>\n","      <td>192.168.1.126</td>\n","      <td>14824</td>\n","      <td>10.0.0.103</td>\n","      <td>3389</td>\n","      <td>tcp</td>\n","      <td>dns</td>\n","      <td>14.612585</td>\n","      <td>1664</td>\n","      <td>15331</td>\n","      <td>S0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.749804e+09</td>\n","      <td>ab4433f9-bac6-410d-a0e1-2498192f6ea8</td>\n","      <td>192.168.1.18</td>\n","      <td>5807</td>\n","      <td>10.0.0.104</td>\n","      <td>80</td>\n","      <td>tcp</td>\n","      <td>dns</td>\n","      <td>49.016475</td>\n","      <td>4726</td>\n","      <td>17196</td>\n","      <td>SF</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.749806e+09</td>\n","      <td>467d36f4-4d3b-468c-8aec-0e965400f01d</td>\n","      <td>192.168.1.132</td>\n","      <td>13612</td>\n","      <td>10.0.0.103</td>\n","      <td>443</td>\n","      <td>tcp</td>\n","      <td>ssh</td>\n","      <td>30.169509</td>\n","      <td>1902</td>\n","      <td>16396</td>\n","      <td>S0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.749805e+09</td>\n","      <td>8c37032e-a5e6-4d4b-b304-d82008664529</td>\n","      <td>192.168.1.127</td>\n","      <td>65256</td>\n","      <td>10.0.0.103</td>\n","      <td>3389</td>\n","      <td>tcp</td>\n","      <td>-</td>\n","      <td>18.465165</td>\n","      <td>4728</td>\n","      <td>13343</td>\n","      <td>REJ</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.749804e+09</td>\n","      <td>cbdd4595-f46b-4283-96ea-ce201475e8b3</td>\n","      <td>192.168.1.48</td>\n","      <td>7879</td>\n","      <td>192.168.1.36</td>\n","      <td>50747</td>\n","      <td>udp</td>\n","      <td>ssl</td>\n","      <td>4.641450</td>\n","      <td>1986</td>\n","      <td>22544</td>\n","      <td>SF</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-130a67f5-1a9a-495d-929e-f22848e53911')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-130a67f5-1a9a-495d-929e-f22848e53911 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-130a67f5-1a9a-495d-929e-f22848e53911');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-506f690f-d2c0-4d0b-bd77-1c09afcfa87d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-506f690f-d2c0-4d0b-bd77-1c09afcfa87d')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-506f690f-d2c0-4d0b-bd77-1c09afcfa87d button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(zeek_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"ts\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 709.6574137211627,\n        \"min\": 1749803884.4347577,\n        \"max\": 1749805605.9429696,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1749803884.4347577,\n          1749804300.43221,\n          1749805605.9429696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"uid\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"ab4433f9-bac6-410d-a0e1-2498192f6ea8\",\n          \"cbdd4595-f46b-4283-96ea-ce201475e8b3\",\n          \"467d36f4-4d3b-468c-8aec-0e965400f01d\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"id.orig_h\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"192.168.1.18\",\n          \"192.168.1.48\",\n          \"192.168.1.132\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"id.orig_p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24764,\n        \"min\": 5807,\n        \"max\": 65256,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5807,\n          7879,\n          13612\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"id.resp_h\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"10.0.0.103\",\n          \"10.0.0.104\",\n          \"192.168.1.36\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"id.resp_p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21934,\n        \"min\": 80,\n        \"max\": 50747,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          80,\n          50747,\n          3389\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"proto\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"udp\",\n          \"tcp\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"service\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"ssh\",\n          \"ssl\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.996195916100497,\n        \"min\": 4.64145,\n        \"max\": 49.016475,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          49.016475,\n          4.64145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"orig_bytes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1579,\n        \"min\": 1664,\n        \"max\": 4728,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4726,\n          1986\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"resp_bytes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3438,\n        \"min\": 13343,\n        \"max\": 22544,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          17196,\n          22544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"conn_state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S0\",\n          \"SF\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}